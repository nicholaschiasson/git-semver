name: build

on:
  push:
    branches:
      - 'main'
  pull_request:

env:
  CARGO_TERM_COLOR: always
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Check
        run: cargo check --all-features --verbose
      - name: Format
        run: cargo fmt --check --verbose
      - name: Lint
        run: rustup component add clippy && cargo clippy --verbose
      - name: Test
        run: cargo test --all-features --verbose

  tag:
    if: github.event_name == 'push' || (github.base_ref == 'main' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    needs: [validate]
    outputs:
      version: ${{ steps.stamp.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Check semver bump
        id: check-semver
        run: |
          if [[ "${{ github.event.head_commit.message }}" =~ ^Merge\ pull\ request\ #[0-9]+\ from\ [^/]+/patch/.+$ ]]
          then
            echo "semver=patch" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.head_commit.message }}" =~ ^Merge\ pull\ request\ #[0-9]+\ from\ [^/]+/major/.+$ ]]
          then
            echo "semver=major" >> $GITHUB_OUTPUT
          else
            echo "semver=minor" >> $GITHUB_OUTPUT
          fi
      - name: Bump major version and push tag
        id: bump-major
        if: ${{ steps.check-semver.outputs.semver == 'major' }}
        uses: anothrNick/github-tag-action@1.65.0
        env:
          DEFAULT_BUMP: major
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Bump minor version and push tag
        id: bump-minor
        if: ${{ steps.check-semver.outputs.semver == 'minor' }}
        uses: anothrNick/github-tag-action@1.65.0
        env:
          DEFAULT_BUMP: minor
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Bump patch version and push tag
        id: bump-patch
        if: ${{ steps.check-semver.outputs.semver == 'patch' }}
        uses: anothrNick/github-tag-action@1.65.0
        env:
          DEFAULT_BUMP: patch
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Stamp version
        id: stamp
        run: |
          if [[ "${{ steps.check-semver.outputs.semver }}" == patch ]]
          then
            VERSION=${{ steps.bump-patch.outputs.new_tag }}
          elif [[ "${{ steps.check-semver.outputs.semver }}" == major ]]
          then
            VERSION=${{ steps.bump-major.outputs.new_tag }}
          else
            VERSION=${{ steps.bump-minor.outputs.new_tag }}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          sed -i "s/version = \"0.0.0\"/version = \"${VERSION}\"/" Cargo.toml
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: 'Cargo.toml'
          path: 'Cargo.toml'

  build:
    if: github.event_name == 'push' || (github.base_ref == 'main' && github.event.pull_request.merged == true)
    strategy:
      matrix:
        platform: [macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    needs: [tag]
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4.2.1
        with:
          name: 'Cargo.toml'
      - name: Build
        shell: bash
        run: |
          RAW_BINARY_NAME=git-semver
          BINARY_NAME=${RAW_BINARY_NAME}
          if [[ ${{ startsWith(matrix.platform, 'windows') }} == true ]]
          then
            BINARY_NAME=${BINARY_NAME}.exe
          fi
          cargo build --release --verbose
          cp target/release/${BINARY_NAME} ./
          tar czf ${RAW_BINARY_NAME}-${{ runner.os }}-${{ runner.arch }}.tar.gz ${BINARY_NAME}
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: artifact-${{ runner.os }}-${{ runner.arch }}
          path: '*.tar.gz'

  publish_crates:
    if: github.event_name == 'push' || (github.base_ref == 'main' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    needs: [tag]
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4.2.1
        with:
          name: 'Cargo.toml'
      - name: Publish to crates.io
        run: |
          cargo login ${{ secrets.CRATES_IO_API_TOKEN }}
          cargo publish --allow-dirty --verbose

  publish_docker:
    if: github.event_name == 'push' || (github.base_ref == 'main' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    needs: [tag]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.tag.outputs.version }}
            ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  release:
    if: github.event_name == 'push' || (github.base_ref == 'main' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    needs: [tag, build]
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4.2.1
      - name: Release
        uses: softprops/action-gh-release@v0.1.15
        with:
          files: 'artifact-*/*.tar.gz'
          tag_name: ${{ needs.tag.outputs.version }}
